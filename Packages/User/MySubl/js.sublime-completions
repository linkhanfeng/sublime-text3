{
  "scope": "source.js",
  "completions": [
    {"trigger": "import                            | jj other", "contents": "import { ${1:modle} } from '${2:path}'"},
    {"trigger": "require                           | jj other", "contents": "const ${1:name} = require('${2:path}')"},
    {"trigger": "continue                          | jj other", "contents": "continue"},
    {"trigger": "break                             | jj other", "contents": "break"},
    {"trigger": "length                            | jj other", "contents": "length"},
    // es6
    {"trigger": "arr.find()                        | jj es6.arr", "contents": "find(${1:item} => ${2:item}${3})"},
    {"trigger": "arr.findIndex()                   | jj es6.arr", "contents": "findIndex(${1:item} => ${2:item}${3})"},
    {"trigger": "arr.keys()                        | jj es6.arr", "contents": "for (let ${2:index} of ${3:arr}.keys()) {\n\t${4://}\n}\n"},
    {"trigger": "arr.values()                      | jj es6.arr", "contents": "for (let ${2:item} of ${3:arr}.values()) {\n\t${4://}\n}"},
    {"trigger": "arr.entries()                     | jj es6.arr", "contents": "for (let [${2:index, item}] of ${3:arr}.entries()) {\n\t${4://}\n}\n"},
    {"trigger": "arr.includes                      | jj es6.arr", "contents": "includes(${1})"},
    {"trigger": "arr.flat                          | jj es6.arr", "contents": "flat(${1})"},
    {"trigger": "arr.flatMap                       | jj es6.arr", "contents": "flatMap(${1})"},
    {"trigger": "arr.Spread A 函数参数             | jj es6.arr", "contents": "...${1:Math.max(...[14, 3, 77]) // 等同 Math.max(14, 3, 77)}"},
    {"trigger": "arr.Spread B 深拷贝               | jj es6.arr", "contents": "${1:var a2 = [...a1]; // a2是一个深拷贝 等同 var a2 = a1.concat(); }"},
    {"trigger": "arr.Spread C 合并数组             | jj es6.arr", "contents": "${1:[...arr1, ...arr2, ...arr3] // 返回浅拷贝 等同 arr1.concat(arr2, arr3) }"},
    {"trigger": "arr.Spread D Destructuring        | jj es6.arr", "contents": "${1:const [first, ...rest] = [1, 2, 3, 4, 5] // first: 1   rest: [2, 3, 4, 5]}"},
    {"trigger": "arr.Spread E 转为数组             | jj es6.arr", "contents": "${1:[...'hello'] // 将字符串转化为真正的数组}"},
    {"trigger": "Array.from()                      | jj es6.arr", "contents": "Array.from(${1:arrayLike转数组})"},
    {"trigger": "Array.of()                        | jj es6.arr", "contents": "Array.of(${1:替代Arrary构造函数})"},
    {"trigger": "obj.Destructuring 解构            | jj es6.obj", "contents": "let { ${1:key1}, ${2:key2} } = ${3}"},
    {"trigger": "obj.for of                        | jj es6.obj", "contents": "for (var ${1:ka} of Object.keys(${2})) {${3}}"},
    // 入门篇 (basic)
    //     导论                                          bas - sum
    //     历史                                          bas - hist
    //     基本语法                                      bas - grammar
    {"trigger": "number_7dt                        | jj base", "contents": "number"},
    {"trigger": "string_7dt                        | jj base", "contents": "string"},
    {"trigger": "boolean_7dt                       | jj base", "contents": "boolean"},
    {"trigger": "undefined_7dt                     | jj base", "contents": "undefined"},
    {"trigger": "null_7dt                          | jj base", "contents": "null"},
    {"trigger": "object_7dt                        | jj base", "contents": "object"},
    {"trigger": "symbol_7dt                        | jj base", "contents": "symbol"},
    {"trigger": "return                            | jj base", "contents": "return"},
    {"trigger": "use strict                        | jj base", "contents": "'use strict'\n"},
    {"trigger": "log                               | jj base", "contents": "console.log(${1})"},
    {"trigger": "if                                | jj base", "contents": "if (${3:}) {\n\t${4:}\n}"},
    {"trigger": "ife                               | jj base", "contents": "if (${3:}) {\n\t${4:}\n} else {\n\tee\n}\n"},
    {"trigger": "ifelseif                          | jj base", "contents": "if (${3:}) {\n} else if (${4:}) {\n} else {\n}"},
    {"trigger": "else                              | jj base", "contents": "else {\n\t${4:}\n}"},
    {"trigger": "switch                            | jj base", "contents": "switch (${3:}) {\n\tcase ${4:}:\n\t\tbreak\n\tcase ${5:}:\n\t\tbreak\n\tdefault:\n}\n"},
    {"trigger": "while                             | jj base", "contents": "let ${1:i} = 0\nwhile (${1:i} < 100) {\n\t${1:i} = ${1:i} + 1\n}"},
    {"trigger": "for                               | jj base", "contents": "for (let ${3:i} = 0, len = arr.length; ${3:i} < len; ${3:i}++) {\n\t${4:// ...}\n}"},
    {"trigger": "typeof                            | jj data", "contents": "typeof ${1:数组,对象,null,均返回 object; instanceof 可以区分数组和对象}"},
    // 数据类型 (type)
    //     概述                                          typ - sum
    {"trigger": "isNull(*)                         | jj typs.is", "contents": "type.isNull(${1})"},
    {"trigger": "isUndefined(*)                    | jj typs.is", "contents": "type.isUndefined(${1})"},
    {"trigger": "isObject(*)                       | jj typs.is", "contents": "type.isObject(${1})"},
    {"trigger": "isArray(*)                        | jj typs.is", "contents": "type.isArray(${1})"},
    {"trigger": "isString(*)                       | jj typs.is", "contents": "type.isString(${1})"},
    {"trigger": "isNumber(*)                       | jj typs.is", "contents": "type.isNumber(${1})"},
    {"trigger": "isBoolean(*)                      | jj typs.is", "contents": "type.isBoolean(${1})"},
    {"trigger": "false                             | jj typs.Boolean", "contents": "false"},
    {"trigger": "true                              | jj typs.Boolean", "contents": "true"},
    {"trigger": "isFunction(*)                     | jj typs.is", "contents": "type.isFunction(${1})"},
    {"trigger": "isRegExp(*)                       | jj typs.is", "contents": "type.isRegExp(${1})"},
    //     null，undefined 和布尔值                      typ - null
    //     数值                                          typ - num
    {"trigger": "NaN                               | jj typs.num", "contents": "NaN"},
    {"trigger": "isNaN()                           | jj typs.num", "contents": "isNaN(${1})"},
    {"trigger": "Infinity                          | jj typs.num", "contents": "Infinity${1:-Infinity}"},
    {"trigger": "isFinite()                        | jj typs.num", "contents": "isFinite(${1:正常的number返回ture})"},
    {"trigger": "parseInt()                        | jj typs.num", "contents": "parseInt(${1:第一个字符不能转化,则返回NaN 包括空字符串}, ${2:10})"},
    {"trigger": "parseFloat()                      | jj typs.num", "contents": "parseFloat(${1:第一个字符不能转化,则返回NaN 包括空字符串})"},
    //     字符串                                        typ - str
    {"trigger": "base64Encode()                    | jj typs.str", "contents": "window.btoa(encodeURIComponent(${1:转换为 0-9,Aa-Zz,/,+ 64个字符表示}))"},
    {"trigger": "base64Decode()                    | jj typs.str", "contents": "decodeURIComponent(window.atob(${1:base64字符串}))"},
    //     对象                                          typ - obj
    {"trigger": "delete                            | jj typs.obj", "contents": "delete ${1:o.p 只能删除自身的属性}"},
    {"trigger": "in                                | jj typs.obj", "contents": "'p' in o 无法判断属性继承还是自身;推荐使用 hasOwnProperty 替代"},
    {"trigger": "forIn                             | jj typs.obj", "contents": "for (var ${3:key包含继承的属性,使用keys()替代} in obj) {\n\t${3:key包含继承的属性,使用keys()替代}\n}"},
    //     函数                                          typ - fn
    {"trigger": "fn.A                              | jj typs.fn", "contents": "function ${3:name} (${4:}) {\n\t${5:// 函数是一种可执行的 值,同理命令式函数会提升,且是完整函数而不是undefind,函数表达式为undefind报错}\n}"},
    {"trigger": "fn.B                              | jj typs.fn", "contents": "var ${3:name} = function (${4:}) {\n\t${5:// ...}\n}"},
    {"trigger": "fn.BB                             | jj typs.fn", "contents": "var ${3:name} = function ${3:name} (${4:}) {\n\t${5:// ...}\n}"},
    {"trigger": "fn.C                              | jj typs.fn", "contents": "var ${1:name} = new Function('${2:x}', 'return ${2:x}')"},
    {"trigger": "f.name()                          | jj typs.fn", "contents": "name${1:函数名称,具名函数优先}"},
    {"trigger": "f.length()                        | jj typs.fn", "contents": "定义时的参数个数"},
    {"trigger": "f.toString()                      | jj typs.fn", "contents": "函数的源码"},
    {"trigger": "f.scope                           | jj typs.fn", "contents": "var x = function () { // 函数本身的作用域: 是定义时所在的作用域，而不是调用时所在的作用域。\n\tconsole.log(a) // 此处的 a 是 window.a\n}\nfunction y (x) {\n\tvar a = 2\n\tx()\n}\ny(x) // 返回 undefined; 因为 函数x定义时的作用域在window下"},
    {"trigger": "f.params                          | jj typs.fn", "contents": "var obj = { p: 1 }\nvar obj2 = { p: 'pp' }\nvar str = 'a'\nfunction f (o, s, o2) {\n\to.p = 2 // 指向同一个地址\n\ts = 'b' // 指向一个新地址,原地址不变\n\to2 = { p: '${3:}' } // 指向一个新地址,原地址不变\n}\nf(obj, str)\nconsole.log(obj.p) // 2 传址(pass by reference): 函数内和函数外的\\\"属性值\\\"用的同一个地址; 复合类型的值（数组、对象、其他函数）\nconsole.log(str) // a 传值(passes by value): 函数内不会影响函数外; 原始类型的值（数值、字符串、布尔值）\nconsole.log(obj2.p) // 'pp' 不会影响; 根本原因可以这样理解:属性值是一个地址的软连接; 而任何数据类型都是地址的硬链接;"},
    {"trigger": "f.arguments                       | jj typs.fn", "contents": "var args = Array.prototype.slice.call(arguments)"},
    {"trigger": "f.IIFE.a                          | jj typs.fn", "contents": "(function (${3:}) {\n\t${4://}\n})();"},
    {"trigger": "f.IIFE.b                          | jj typs.fn", "contents": "(function (${3:}) {\n\t${4://}\n}());"},
    {"trigger": "f.IIFE.c                          | jj typs.fn", "contents": "true && (function (${3:}) {\n\t${4:// 两个IIFE同时使用可以不使用分号}\n})()"},
    {"trigger": "f.eval()                          | jj typs.fn", "contents": "eval('${1:在当前作用域注入代码,不利于引擎优化,一般不推荐.}')"},
    //     数组                                          typ - arr
    {"trigger": "a.overview                        | jj typs.arr", "contents": "var a = [0, 1]\nif (a['1'] === a[1.00] && a['1'] === a[1]) {\n\tconsole.log(true) // 本质上数组就是有序的 对象, 所以 index 本质上也是字符串\n}\na.c = 'c' // [0, 1, c: \\\"c\\\"] 本质上数组就是对象 typeof a; object\nObject.keys(a) // [\\\"0\\\", \\\"1\\\", \\\"c\\\"] 本质对象\na.forEach(index => { console.log(index) }) // 0,1,undefined 数组的方法无法应用于非整数index\n\nvar arr = ['a', 'b']\nconsole.log(arr.length) // 2\narr[1000] = 'e'\nconsole.log(arr.length, arr[2]) // 1001,undefined 比最大的那个整数键大1; 空位置返回 undefind\narr.length = 0 // [] 可以清空正常的数组"},
    {"trigger": "a.arrayLike                       | jj typs.arr", "contents": "Array.prototype.slice.call(${1:dom集合等类数组对象})"},
    // 运算符 (operator)
    //     算术运算符                                    opr - arit (arithmetic)
    //     比较运算符                                    opr - compar (comparison)
    //     布尔运算符                                    opr - bool
    //     二进制位运算符                                opr - bit
    //     其他运算符，运算顺序                          opr - prior (priority优先级)
    // 语法特性 (grammar)
    //     数据类型的转换                                gra - conv (conversion)
    {"trigger": "Number()                          | jj gram.conver", "contents": "Number(${1})"},
    {"trigger": "String()                          | jj gram.conver", "contents": "String(${1})"},
    {"trigger": "Boolean()                         | jj gram.conver", "contents": "Boolean(${1})"},
    //     错误处理机制                                  gra - error
    {"trigger": "throw                             | jj gram.err", "contents": "throw new Error('${1:msg}')"},
    {"trigger": "Error                             | jj gram.err", "contents": "throw new Error('${1:msg}')"},
    {"trigger": "SyntaxError                       | jj gram.err", "contents": "throw new SyntaxError('${1:语法错误}')"},
    {"trigger": "ReferenceError                    | jj gram.err", "contents": "throw new ReferenceError('${1:引用不存在的变量}')"},
    {"trigger": "RangeError                        | jj gram.err", "contents": "throw new RangeError('${1:值超出有效范围,数组长度,函数堆栈等}')"},
    {"trigger": "TypeError                         | jj gram.err", "contents": "throw new TypeError('${1:参数类型错误}')"},
    {"trigger": "URIError                          | jj gram.err", "contents": "throw new URIError('${1:url相关的函数}')"},
    {"trigger": "EvalError                         | jj gram.err", "contents": "throw new EvalError('${1:eval函数错误}')"},
    {"trigger": "UserError                         | jj gram.err", "contents": "\tfunction UserError (message = '自定义错误') {\n\t\tthis.message = message\n\t\tthis.name = 'UserError'\n\t}\n\tUserError.prototype = new Error()\n\tUserError.prototype.constructor = UserError"},
    {"trigger": "err.message                       | jj gram.err", "contents": "message"},
    {"trigger": "err.name                          | jj gram.err", "contents": "name"},
    {"trigger": "err.stack                         | jj gram.err", "contents": "stack"},
    {"trigger": "tryCatch                          | jj gram.err", "contents": "// openFile()\ntry {\n\t// writeFile(Data)\n} catch (e) {\n\t// handleError(e)\n} finally {\n\t// 无错误->直接关闭文件; 有错误->处理完错误->关闭文件\n\t// closeFile()\n\t// 程序不中断继续往后执行\n}\n"},
    //     编程风格                                      gram - style
    //     console 对象与控制台                          gram - console
    {"trigger": "log                               | jj gram.log", "contents": "console.log(${1})"},
    {"trigger": "console.log                       | jj gram.log", "contents": "console.log(${1})"},
    {"trigger": "console.info                      | jj gram.log", "contents": "console.info(${1})"},
    {"trigger": "console.debug                     | jj gram.log", "contents": "console.debug(${1})"},
    {"trigger": "console.warn                      | jj gram.log", "contents": "console.warn(${1})"},
    {"trigger": "console.error                     | jj gram.log", "contents": "console.error(${1})"},
    {"trigger": "console.table                     | jj gram.log", "contents": "console.table(${1})"},
    {"trigger": "console.count                     | jj gram.log", "contents": "console.count(${1})"},
    {"trigger": "console.dir                       | jj gram.log", "contents": "console.dir(${1})"},
    {"trigger": "console.dirxml                    | jj gram.log", "contents": "console.dirxml(${1})"},
    {"trigger": "console.assert                    | jj gram.log", "contents": "console.assert(${1:条件}, ${2:条件不成立时输出})"},
    {"trigger": "console.time                      | jj gram.log", "contents": "console.time(${1})"},
    {"trigger": "console.timeEnd                   | jj gram.log", "contents": "console.timeEnd(${1})"},
    {"trigger": "console.group                     | jj gram.log", "contents": "console.group(${1})"},
    {"trigger": "console.groupEnd                  | jj gram.log", "contents": "console.groupEnd(${1})"},
    {"trigger": "console.groupCollapsed            | jj gram.log", "contents": "console.groupCollapsed(${1})"},
    {"trigger": "console.trace                     | jj gram.log", "contents": "console.groupCollapsed()"},
    {"trigger": "console.clear                     | jj gram.log", "contents": "console.clear()"},
    {"trigger": "debugger                          | jj gram.log", "contents": "debugger"},
    // 标准库 (stdlib)
    //     Object 对象                                   std - obj
    {"trigger": "Object()                          | jj std.obj", "contents": "Object(${1:对象返回本身,确保一个值一定是对象})"},
    {"trigger": "isObject(*)                       | jj std.obj", "contents": "function isObject (value) {\n\treturn value === Object(value)\n}"},
    {"trigger": "instanceof                        | jj std.obj", "contents": "instanceof"},
    {"trigger": "obj.constructor                   | jj std.obj", "contents": "constructor${1:返回实例的构造函数}"},
    {"trigger": "new Object()                      | jj std.obj", "contents": "new Object(${1:})"},
    {"trigger": "Object.keys()                     | jj std.obj", "contents": "Object.keys(${3:自身可枚举的属性})"},
    {"trigger": "Object.length(*)                  | jj std.obj", "contents": "Object.keys(${1:}).length"},
    {"trigger": "Object.assign()                   | jj std.obj", "contents": "Object.assign(${3:obj1,2,3..})"},
    {"trigger": "Object.create()                   | jj std.obj", "contents": "Object.create(${1:该方法可以指定原型对象和属性，返回一个新的对象。})"},
    {"trigger": "prototype                         | jj std.obj", "contents": "prototype"},
    {"trigger": "Object.getPrototypeOf()           | jj std.obj", "contents": "Object.getPrototypeOf(${1:获取对实例的 prototype 对象,默认指向其构造函数的 prototype 对象})"},
    {"trigger": "obj.valueOf()                     | jj std.obj", "contents": "obj.valueOf(${1:返回当前对象对应的值。})"},
    {"trigger": "obj.toString()                    | jj std.obj", "contents": "obj.toString(${1:返回当前对象对应的字符串形式。})"},
    {"trigger": "obj.toLocaleString()              | jj std.obj", "contents": "obj.toLocaleString(${1:返回当前对象对应的本地字符串形式。})"},
    {"trigger": "obj.hasOwnProperty()              | jj std.obj", "contents": "obj.hasOwnProperty(${1:判断某个属性是否为当前实例自身,还是继承的})"},
    {"trigger": "obj.isPrototypeOf()               | jj std.obj", "contents": "obj.isPrototypeOf(${1:判断当前对象是否为另一个对象的原型。})"},
    //     属性描述对象                                  std - attr
    {"trigger": "Object.getOwnPropertyDescriptor() | jj std.obj.attr", "contents": "Object.getOwnPropertyDescriptor(${1:获取某个属性的描述对象。})"},
    {"trigger": "Object.getOwnPropertyNames()      | jj std.obj.attr", "contents": "Object.getOwnPropertyNames(${3:包括不可枚举属性,使用kes()代替})"},
    {"trigger": "Object.defineProperty()           | jj std.obj.attr", "contents": "Object.defineProperty(${1:通过描述对象，定义某个属性。})"},
    {"trigger": "Object.defineProperties()         | jj std.obj.attr", "contents": "Object.defineProperties(${1:通过描述对象，定义多个属性。})"},
    {"trigger": "obj.propertyIsEnumerable()        | jj std.obj.attr", "contents": "Object.getOwnPropertyDescriptor(${3:obj}, ${4:'p'判断某个属性是否可枚举。})"},
    {"trigger": "Object.preventExtensions()        | jj std.obj.attr", "contents": "Object.preventExtensions(${1:防止对象扩展。})"},
    {"trigger": "Object.isExtensible()             | jj std.obj.attr", "contents": "Object.isExtensible(${1:判断对象是否可扩展。})"},
    {"trigger": "Object.seal()                     | jj std.obj.attr", "contents": "Object.seal(${1:禁止对象配置。})"},
    {"trigger": "Object.isSealed()                 | jj std.obj.attr", "contents": "Object.isSealed(${1:判断一个对象是否可配置。})"},
    {"trigger": "Object.freeze()                   | jj std.obj.attr", "contents": "Object.freeze(${1:冻结一个对象。})"},
    {"trigger": "Object.isFrozen()                 | jj std.obj.attr", "contents": "Object.isFrozen(${1:判断一个对象是否被冻结。})"},
    //     Array 对象                                    std - arr
    //                      构造函数
    {"trigger": "new Array                         | jj std.arr", "contents": "new Array(${3:构造函数})"},
    //                      静态方法
    {"trigger": "Array.isArray()                   | jj std.arr", "contents": "Array.isArray(${3:arr})"},
    //                      实例方法
    {"trigger": "arr.toString()                    | jj std.arr", "contents": "toString()"},
    {"trigger": "arr.valueOf()                     | jj std.arr", "contents": "valueOf()"},
    {"trigger": "arr.pop()                         | jj std.arr", "contents": "pop(${3:变异-末尾删除})"},
    {"trigger": "arr.push()                        | jj std.arr", "contents": "push(${3:变异-末尾新增})"},
    {"trigger": "arr.shift()                       | jj std.arr", "contents": "shift(${3:变异-开头删除})"},
    {"trigger": "arr.unshift()                     | jj std.arr", "contents": "unshift(${3:变异-开头新增})"},
    {"trigger": "arr.join()                        | jj std.arr", "contents": "join(${3:默认逗号})"},
    {"trigger": "arr.join().arrLike                | jj std.arr", "contents": "Array.prototype.join.call('hello', '-')"},
    {"trigger": "arr.concat()                      | jj std.arr", "contents": "${2:['hello']}.concat(${3:['world']})"},
    {"trigger": "arr.reverse()                     | jj std.arr", "contents": "reverse()${3:变异-倒序}"},
    {"trigger": "arr.slice()                       | jj std.arr", "contents": "slice(${1:start}, ${2:end})"},
    {"trigger": "arr.splice()                      | jj std.arr", "contents": "arr.splice(${3:start包含, count, addElement1, addElement2, ...})${4:变异}"},
    {"trigger": "arr.sort()                        | jj std.arr", "contents": "sort()"},
    {"trigger": "arr.map()                         | jj std.arr", "contents": "arr.map(${3:n} => {\n\t${4:}return${5:}\n})\n"},
    {"trigger": "arr.forEach()                     | jj std.arr", "contents": "forEach(${3:n} => {\n\t${4://}\n})\n"},
    {"trigger": "arr.filter()                      | jj std.arr", "contents": "arr.filter(${3:n} => {\n\t${4:}return ${5:n === true}\n})\n"},
    {"trigger": "arr.some()                        | jj std.arr", "contents": "arr.some(${3:n} => {\n\t${4:}return ${5:n === true 逻辑 或}\n})\n"},
    {"trigger": "arr.every()                       | jj std.arr", "contents": "arr.every(${3:n} => {\n\t${4:}return ${5:n === true 逻辑 与}\n})\n"},
    {"trigger": "arr.reduce()                      | jj std.arr", "contents": "reduce(fun)累加元素"},
    {"trigger": "arr.reduceRight()                 | jj std.arr", "contents": "reduceRight(fun)累加元素"},
    {"trigger": "arr.indexOf()                     | jj std.arr", "contents": "indexOf(${3:item})"},
    {"trigger": "arr.lastIndexOf()                 | jj std.arr", "contents": "lastIndexOf(${3:item})"},
    //     包装对象                                      std - wrap (wrapper)
    {"trigger": "wrapper.Number()                  | jj std.wrap", "contents": "var ${2:v1} = new Number(${3:123})"},
    {"trigger": "wrapper.String()                  | jj std.wrap", "contents": "var ${2:v2} = new String(${3:'abc'})"},
    {"trigger": "wrapper.Boolean()                 | jj std.wrap", "contents": "var ${2:v3} = new Boolean(${3:true})"},
    {"trigger": "wrapper.valueOf()                 | jj std.wrap", "contents": "new Boolean(${3:true}).valueOf()"},
    {"trigger": "wrapper.toString()                | jj std.wrap", "contents": "new Boolean(${3:true}).toString()"},
    //     Boolean 对象                                  std - bool
    {"trigger": "Boolean(undefined)                | jj std.bool", "contents": "Boolean(undefined) // false"},
    {"trigger": "Boolean(undefined)                | jj std.bool", "contents": "Boolean(undefined) // false"},
    {"trigger": "Boolean(null)                     | jj std.bool", "contents": "Boolean(null) // false"},
    {"trigger": "Boolean(0)                        | jj std.bool", "contents": "Boolean(0) // false"},
    {"trigger": "Boolean('')                       | jj std.bool", "contents": "Boolean('') // false"},
    {"trigger": "Boolean(NaN)                      | jj std.bool", "contents": "Boolean(NaN) // false"},
    {"trigger": "Boolean(1)                        | jj std.bool", "contents": "Boolean(1) // true"},
    {"trigger": "Boolean([])                       | jj std.bool", "contents": "Boolean([]) // true"},
    {"trigger": "Boolean({})                       | jj std.bool", "contents": "Boolean({}) // true"},
    {"trigger": "Boolean(function () {})           | jj std.bool", "contents": "Boolean(function () {}) // true"},
    //     Number 对象                                   std - num
    {"trigger": "Number.NaN                        | jj std.num", "contents": "Number.NaN"},
    {"trigger": "Number.MAX_SAFE_INTEGER           | jj std.num", "contents": "Number.MAX_SAFE_INTEGER"},
    {"trigger": "Number.MIN_SAFE_INTEGER           | jj std.num", "contents": "Number.MIN_SAFE_INTEGER"},
    {"trigger": "num.toString()                    | jj std.num", "contents": "(${2:10}).toString($(10))"},
    {"trigger": "num.toString()B                   | jj std.num", "contents": "${2:10}.0.toString($(10))"},
    {"trigger": "num.toFixed()                     | jj std.num", "contents": "(${2:10}).toFixed($(2))"},
    {"trigger": "num.toFixed()B                    | jj std.num", "contents": "parseFloat((${2:10.10012233}).toFixed(2))${4: // 保留2位小数去掉多余的0}"},
    {"trigger": "num.toLocaleString()              | jj std.num", "contents": "(123).toLocaleString('zh-Hans-CN', { style: 'currency', currency: 'CNY' })"},
    //     String 对象                                   std - str
    {"trigger": "String.fromCharCode()             | jj std.str", "contents": "String.fromCharCode(${1:97})${3: // a}"},
    {"trigger": "str.charAt()                      | jj std.str", "contents": "${1:'abcd'}.charAt(${2:1})${3: // b}"},
    {"trigger": "str.charCodeAt()                  | jj std.str", "contents": "${1:'abcd'}.charCodeAt(${2:1})${3: // 98}"},
    {"trigger": "str.concat()                      | jj std.str", "contents": "${1:'abcd'}.concat(${2:1, 2})${3: // abcd12}"},
    {"trigger": "str.slice()                       | jj std.str", "contents": "${1:'abcd'}.slice(${2:1, 3})${3: // bc (开始位置,结束位置[不包含])}"},
    {"trigger": "str.substring()                   | jj std.str", "contents": "${1:'abcd'}.substring(${2:1, 3})${3: // bc参数使用负数会转换为0,推荐使用slice替代}"},
    {"trigger": "str.substr()                      | jj std.str", "contents": "${1:'abcd'}.substr(${2:1, 2})${3: // bc(开始位置,长度)}"},
    {"trigger": "str.indexOf()                     | jj std.str", "contents": "${1:'abcd'}.indexOf(${2:'b'})${3: // 1}"},
    {"trigger": "str.lastIndexOf()                 | jj std.str", "contents": "${1:'abcd'}.lastIndexOf(${2:'b'})${3: // 1}"},
    {"trigger": "str.trim()                        | jj std.str", "contents": "trim()"},
    {"trigger": "str.toLowerCase()                 | jj std.str", "contents": "toLowerCase()"},
    {"trigger": "str.toUpperCase()                 | jj std.str", "contents": "toUpperCase()"},
    {"trigger": "str.match()                       | jj std.str", "contents": "${1:'abcd'}.match(${2:'b'})${3: // 失败返回 null [0: 'b', index: 1, input: 'abcd']}"},
    {"trigger": "str.search()                      | jj std.str", "contents": "${1:'abcd'}.search(${2:'b'})${3: // 1 返回位置, 失败返回-1类似于indexOf}"},
    {"trigger": "str.replace()                     | jj std.str", "contents": "${1:'aaaa'}.replace(${2:'a', 'b'})${3: // baaa}"},
    {"trigger": "str.split()                       | jj std.str", "contents": "${1:'abcd'}.split(${2:''})${3: // [a,b,c,d]}"},
    {"trigger": "str.localeCompare()               | jj std.str", "contents": "${1:'a'}.localeCompare(${2:'b'})${3: // -1 自然排序 返回0:相等}"},
    //     Math 对象                                     std - math
    {"trigger": "Math.E 常数e                      | jj std.math", "contents": "Math.E"},
    {"trigger": "Math.LN2 对数                     | jj std.math", "contents": "Math.LN2"},
    {"trigger": "Math.LN10 对数                    | jj std.math", "contents": "Math.LN10"},
    {"trigger": "Math.LOG2E 对数                   | jj std.math", "contents": "Math.LOG2E"},
    {"trigger": "Math.LOG10E 对数                  | jj std.math", "contents": "Math.LOG10E"},
    {"trigger": "Math.PI 常数π                     | jj std.math", "contents": "Math.PI"},
    {"trigger": "Math.SQRT1_2 0.5的平方根          | jj std.math", "contents": "Math.SQRT1_2"},
    {"trigger": "Math.SQRT2 2的平方根              | jj std.math", "contents": "Math.SQRT2"},
    {"trigger": "Math.abs() 绝对值                 | jj std.math", "contents": "Math.abs(${1:})"},
    {"trigger": "Math.ceil() 向上取整              | jj std.math", "contents": "Math.ceil(${1:})"},
    {"trigger": "Math.floor() 向下取整             | jj std.math", "contents": "Math.floor(${1:})"},
    {"trigger": "Math.max() 最大值                 | jj std.math", "contents": "Math.max(${1:})"},
    {"trigger": "Math.min() 最小值                 | jj std.math", "contents": "Math.min(${1:最小值})"},
    {"trigger": "Math.pow() 幂运算                 | jj std.math", "contents": "Math.pow(${1:})"},
    {"trigger": "Math.sqrt() 平方根                | jj std.math", "contents": "Math.sqrt(${1:})"},
    {"trigger": "Math.log() 自然对数               | jj std.math", "contents": "Math.log(${1:})"},
    {"trigger": "Math.exp() e的指数                | jj std.math", "contents": "Math.exp(${1:})"},
    {"trigger": "Math.round() 四舍五入             | jj std.math", "contents": "Math.round(${1:})"},
    {"trigger": "Math.random() 伪随机数            | jj std.math", "contents": "Math.random(${1:})"},
    {"trigger": "Math.randomInt(*)                 | jj std.math", "contents": "function getRandomInt (min, max) {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min\n}"},
    {"trigger": "Math.randomStr(*)                 | jj std.math", "contents": "function randomStr (length) {\n\tvar ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tALPHABET += 'abcdefghijklmnopqrstuvwxyz'\n\tALPHABET += '0123456789-_'\n\tvar str = ''\n\tfor (var i = 0; i < length; ++i) {\n\t\tvar rand = Math.floor(Math.random() * ALPHABET.length)\n\t\tstr += ALPHABET.substring(rand, rand + 1)\n\t}\n\treturn str\n}"},
    //     Date 对象                                     std - date
    {"trigger": "Date new                          | jj std.date", "contents": "new Date(${1:时间戳,或字符串})"},
    {"trigger": "Date.now() Unix时间戳*1000        | jj std.date", "contents": "Date.now()"},
    {"trigger": "Date.parse() 返回 毫秒时间戳      | jj std.date", "contents": "Date.parse(${1:'2011-10-10'})${3: // 1318204800000 失败 NaN}"},
    {"trigger": "Date.UTC()                        | jj std.date", "contents": "Date.UTC(year,month,[date,hrs,min,sec,ms])${3: // 等同于 new Date()}"},
    {"trigger": "date.toString() 日期str           | jj std.date", "contents": "toString()"},
    {"trigger": "date.toUTCString() UTCstr         | jj std.date", "contents": "toUTCString()"},
    {"trigger": "date.toISOString() isoUTCstr      | jj std.date", "contents": "toISOString()"},
    {"trigger": "date.toJSON() isoUTCstr           | jj std.date", "contents": "toJSON()"},
    {"trigger": "date.toDateString() 日期str       | jj std.date", "contents": "toDateString()${3: // 'Thu Jun 18 2020'}"},
    {"trigger": "date.toTimeString() 时间str       | jj std.date", "contents": "toTimeString()${3: // '23:04:41 GMT+0800'}"},
    {"trigger": "date.toLocaleString() 本地        | jj std.date", "contents": "new Date().toLocaleString('zh-CN', {\n\tdateStyle: 'medium',\n\ttimeStyle: 'medium',\n\ttimeZone: 'Asia/Shanghai',\n\ttimeZoneName: 'short',\n\thour12: false\n})"},
    {"trigger": "date.toLocaleDateString() 本地    | jj std.date", "contents": "toLocaleDateString(${1:'zh-CN'})${3: // '2020/6/18'}"},
    {"trigger": "date.toLocaleTimeString() 本地    | jj std.date", "contents": "toLocaleTimeString(${1:'zh-CN'})${3: // '下午11:06:40'}"},
    {"trigger": "date.getTime() 时间戳             | jj std.date", "contents": "getTime()"},
    {"trigger": "date.valueOf() 时间戳             | jj std.date", "contents": "valueOf()"},
    {"trigger": "getDay() 星期 0-6                 | jj std.date", "contents": "getDay()"},
    {"trigger": "getFullYear() 年 2012             | jj std.date", "contents": "getFullYear()"},
    {"trigger": "getMonth() 月 0-11                | jj std.date", "contents": "getMonth()"},
    {"trigger": "getDate() 日 1-31                 | jj std.date", "contents": "getDate()"},
    {"trigger": "getHours() 时 0-23                | jj std.date", "contents": "getHours()"},
    {"trigger": "getMinutes() 分 0-59              | jj std.date", "contents": "getMinutes()"},
    {"trigger": "getSeconds() 秒 0-59              | jj std.date", "contents": "getSeconds()"},
    {"trigger": "getMilliseconds() 毫秒            | jj std.date", "contents": "getMilliseconds()"},
    {"trigger": "getTimezoneOffset() 与utc差       | jj std.date", "contents": "getTimezoneOffset()"},
    {"trigger": "setFullYear() 年                  | jj std.date", "contents": "setFullYear(${1})"},
    {"trigger": "setMonth() 月份（0-11）           | jj std.date", "contents": "setMonth(${1})"},
    {"trigger": "setDate() 日（1-31）              | jj std.date", "contents": "setDate(${1})"},
    {"trigger": "setHours() 小时（0-23）           | jj std.date", "contents": "setHours(${1})"},
    {"trigger": "setMinutes() 分钟（0-59）         | jj std.date", "contents": "setMinutes(${1})"},
    {"trigger": "setSeconds() 秒（0-59）           | jj std.date", "contents": "setSeconds(${1})"},
    {"trigger": "setMilliseconds() 毫秒（0-999）   | jj std.date", "contents": "setMilliseconds(${1})"},
    {"trigger": "setTime() 毫秒时间戳              | jj std.date", "contents": "setTime(${1})"},
    //     RegExp 对象                                   std - reg (regexp)
    {"trigger": "regexp                            | jj std.reg", "contents": "/xyz/i"},
    {"trigger": "reg.ignoreCase                    | jj std.reg", "contents": "${1:是否设置i修饰符}ignoreCase"},
    {"trigger": "reg.global                        | jj std.reg", "contents": "global"},
    {"trigger": "reg.multiline                     | jj std.reg", "contents": "multiline"},
    {"trigger": "reg.flags                         | jj std.reg", "contents": "flags"},
    //     JSON 对象                                     std - json
    {"trigger": "JSON.stringify()                  | jj std.json", "contents": "JSON.stringify(${1:参数2:属性数组或filter函数,参数3:可读性})"},
    {"trigger": "JSON.parse()                      | jj std.json", "contents": "JSON.parse(${1})"},
    {"trigger": "JSON.toJSON                       | jj std.json", "contents": "${1:对象可以自定义toJSON方法}"},
    // 面向对象编程 (oop)
    //     实例对象与 new 命令                           oop - new
    {"trigger": "constructor                       | jj oop.constructor", "contents": "var Animal = function () {\n\tthis.type = '猫科-Animal'\n\tthis.eat = function () { // 2.2 公有方法\n\t\tconsole.log(`${this.name}吃老鼠-Animal`)\n\t}\n}\nvar Cat = function (name) {\n\t'use strict'\n\t// 3.0 继承方式1: 构造函数间 继承机制\n\t// Animal.apply(this, arguments)\n\t// 1.0 私有属性和方法: 实例间互不影响\n\tthis.name = name // 1.1 私有属性\n\tthis.getName = function () { // 1.2 私有方法\n\t\treturn `小猫: ${this.name}`\n\t}\n}\n// 2.0 公有: 实例间共享 不变的 数据,节省内存\nCat.prototype = {\n\ttype: '猫科', // 2.1 公有属性\n\teat: function () { // 2.2 公有方法\n\t\tconsole.log(`${this.name}吃老鼠`)\n\t}\n}\n\n// 3.1 继承方式2: 修改构造函数的 prototype 指向\nCat.prototype = new Animal()\nCat.prototype.constructor = Cat\n\nvar obj = new Cat('小黑')\nconsole.log(obj) // 实例\nconsole.log(Object.getPrototypeOf(obj)) // 实例的 prototype 对象; 默认指向其构造函数的 prototype 对象\n\n// var createObj = {\n//\t price: 300,\n//\t getPrice: function () {\n//\t\t return this.price + '元'\n//\t }\n// }\n\n// var obj1 = Object.create(createObj)\n// var obj2 = Object.create(createObj)\n// obj1.price = 600\n// console.log(obj1.getPrice())\n// console.log(obj2.getPrice())\n// console.log(obj1.constructor)\n"},
    {"trigger": "Object.create                     | jj oop.create", "contents": "var createObj = {\n\tprice: 300,\n\tgetPrice: function () {\n\t\treturn this.price + '元'\n\t}\n}\n\nvar obj1 = Object.create(createObj)\nvar obj2 = Object.create(createObj)\nconsole.log(obj1, obj2)"},
    //     this 关键字                                   oop - this
    //     对象的继承                                    oop - proto (prototype)
    //     Object 对象的相关方法                         oop - object
    //     严格模式                                      oop - strict
    // 异步操作 (async)
    //     概述                                          async - sum
    //     定时器                                        async - timer
    {"trigger": "setTimeout                        | jj std.async", "contents": "setTimeout(() => {\n\t${4://}\n}, ${3:1000})"},
    {"trigger": "setInterval                       | jj std.async", "contents": "var ${3:timer} = setInterval(() => {\n\t${5://}\n}, ${4:1000})"},
    {"trigger": "clearInterval                     | jj std.async", "contents": "clearInterval(${3:timer})"},
    {"trigger": "clearTimeout                      | jj std.async", "contents": "clearTimeout(${3:timer})"},
    {"trigger": "Promise                           | jj std.async", "contents": "var ${3:p1} = new Promise(function (resolve, reject) {\n\t${4:var value = 1}\n\tif (value) {\n\t\tresolve(value)\n\t} else {\n\t\treject(new Error())\n\t}\n})\n"},
    //     Promise 对象                                  async - promise
    // DOM (dom)
    //     概述                                          dom - sum
    //     Node 接口                                     dom - node
    //     NodeList 接口，HTMLCollection 接口            dom - nodeList
    //     ParentNode 接口，ChildNode 接口               dom - nodeChild (parentnode)
    //     Document 节点                                 dom - doc (document)
    //     Element 节点                                  dom - ele (element)
    //     属性的操作                                    dom - attr (attributes)
    //     Text 节点和 DocumentFragment 节点             dom - text
    //     CSS 操作                                      dom - css
    //     Mutation Observer API                         dom - obs (dom变动异步监视api)
    // 事件 (event) 事件的本质是程序各个组成部分之间的一种通信方式
    //     EventTarget 接口                              event - target
    //     button.addEventListener('${1:click}', ${2:fn}, false);
    {"trigger": "addEventListener                  | jj event.target", "contents": "addEventListener('${1:click}', ${2:fn}, false)"},
    {"trigger": "removeEventListener               | jj event.target", "contents": "removeEventListener('${1:click}', ${2:fn}, false)"},
    {"trigger": "dispatchEvent                     | jj event.target", "contents": "dispatchEvent(${1:Event})"},
    //     事件模型                                      event - model
    {"trigger": "preventDefault                    | jj event.model", "contents": "event.preventDefault() // 取消浏览器默认行为"},
    {"trigger": "stopPropagation                   | jj event.model", "contents": "event.stopPropagation() // 阻止当前事件的传播"},
    {"trigger": "stopImmediatePropagation          | jj event.model", "contents": "event.stopImmediatePropagation() // 阻止当前事件的传播并阻止该事件再次发生"},
    {"trigger": "composedPath                      | jj event.model", "contents": "event.composedPath() // 返回事件冒泡经过的节点"},
    //     Event 对象                                    event - Event
    //     鼠标事件                                      event - mouse
    //     键盘事件                                      event - key (keyboard)
    //     进度事件                                      event - prog (progress)
    //     表单事件                                      event - form
    //     触摸事件                                      event - touch
    //     拖拉事件                                      event - drag
    //     其他常见事件                                  event - other
    //     GlobalEventHandlers 接口                      event - hand (Handler)
    // BOM
    //     浏览器模型概述                                bom - sum
    //     window 对象                                   bom - window
    //     Navigator 对象，Screen 对象                   bom - nav (navigator)
    //     Cookie                                        bom - cook (cookie)
    //     XMLHttpRequest 对象                           bom - xml (xmlhttprequest)
    //     同源限制                                      bom - orig (same-origin)
    //     CORS 通信                                     bom - cors
    //     Storage 接口                                  bom - stor (storage)
    {"trigger": "localStorage.setItem()            | jj bom.storage", "contents": "localStorage.setItem($1)"},
    {"trigger": "localStorage.getItem()            | jj bom.storage", "contents": "localStorage.getItem($1)"},
    {"trigger": "localStorage.removeItem()         | jj bom.storage", "contents": "localStorage.removeItem($1)"},
    {"trigger": "localStorage.clear()              | jj bom.storage", "contents": "localStorage.clear($1)"},
    {"trigger": "localStorage.key()                | jj bom.storage", "contents": "localStorage.key($1)"},
    {"trigger": "sessionStore.setItem()            | jj bom.storage", "contents": "sessionStorage.setItem($1)"},
    {"trigger": "sessionStore.getItem()            | jj bom.storage", "contents": "sessionStorage.getItem($1)"},
    {"trigger": "sessionStore.removeItem()         | jj bom.storage", "contents": "sessionStorage.removeItem($1)"},
    {"trigger": "sessionStore.clear()              | jj bom.storage", "contents": "sessionStorage.clear($1)"},
    {"trigger": "sessionStore.key()                | jj bom.storage", "contents": "sessionStorage.key($1)"},
    //     History 对象                                  bom - hist
    //     Location, URL, URLSearchParams 对象           bom - url
    //     ArrayBuffer 对象，Blob 对象                   bom - buf
    //     File 对象，FileList 对象，FileReader 对象     bom - file
    //     表单，FormData 对象                           bom - form
    // 网页元素接口 (element)
    //     <a>                                           ele - a
    //     <img>                                         ele - image
    //     <form>                                        ele - form
    //     <input>                                       ele - input
    //     <button>                                      ele - button
    //     <option>                                      ele - option
    //     <video>，<audio>                              ele - video
  ]
}
